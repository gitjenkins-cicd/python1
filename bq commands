select r.name,r.liveLocation,r.enabletagging from `shakeersreboot.sre_dataset.sre_table_4` ,UNNEST(row) as r where r.name like '%A%'


ignoring Additional fields
bq load --source_format=CSV --ignore_unknown_values
bq load --source_format=CSV  --ignore_unknown_values shakeersreboot:sre_dataset.srepartition input2.csv Date:INTEGER,msg:STRING,url:STRING,responsecode:INTEGER


SELECT (sum(total_bytes_billed)/1099511627776) * 5 as INDollars FROM `region-us.INFORMATION_SCHEMA.JOBS_BY_PROJECT` where job_id like 'job%'


Date 21st June

awk command to reshuffle fields

awk -F ',' '{print $1","$2","$3","$4","$5","$6","$14","$7","$15","$8","$16","$9","$10","$17","$11","$18","$13}' kpi.csv

awk -F ',' '{print $1","$2","$3","$4","$5","$6","$14","$7","$14","$8","$14","$9","$10","$14","$11","$14","$13}' kpi.csv

bq load --source_format=CSV  --skip_leading_rows=1 --ignore_unknown_values shakeersreboot:sre_dataset.jmeter_taurus kpimodified.csv

sed -i "s/$/,,/" kpi.csv


https://cloud.google.com/bigquery/quotas


mvn spring-boot:run -Dspring-boot.run.jvmArguments='-Dserver.port=8085'

update command:

update `jgcp-363516.jgcpdataset.TDM`
  set flag = TRUE
from (
  select cid, flag, max(refreshdata) as max_date
  from `jgcp-363516.jgcpdataset.TDM`
  group by cid, flag
) t
where t.cid = `jgcp-363516.jgcpdataset.TDM`.cid
and t.flag = `jgcp-363516.jgcpdataset.TDM`.flag
and t.max_date = `jgcp-363516.jgcpdataset.TDM`.refreshdata;

update `jgcp-363516.jgcpdataset.TDM` set flag = FALSE where flag in (true,false)

######BQ Query#########

// Import necessary Java classes
import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.BigQueryOptions;
import com.google.cloud.bigquery.QueryJobConfiguration;
import com.google.cloud.bigquery.Job;
import com.google.cloud.bigquery.JobId;
import com.google.cloud.bigquery.JobInfo;
import com.google.cloud.bigquery.TableResult;
import java.util.UUID;

try {
    // Create BigQuery client
    BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();
    
    // Define your SQL query
    String query = "SELECT * FROM your_dataset.your_table";
    
    // Create a query job configuration
    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();
    
    // Create a job ID
    JobId jobId = JobId.of(UUID.randomUUID().toString());
    
    // Create the query job
    Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());
    
    // Wait for the job to complete
    queryJob = queryJob.waitFor();
    
    // Check if the job completed successfully
    if (queryJob != null && queryJob.getStatus().getError() == null) {
        // Get the results
        TableResult result = queryJob.getQueryResults();
        
        // Process the result
        for (com.google.cloud.bigquery.FieldValueList row : result.iterateAll()) {
            // Get data from the result row
            String column1 = row.get("column1_name").getStringValue();
            String column2 = row.get("column2_name").getStringValue();
            
            // Do something with the data, like print it
            log.info("Column 1: " + column1 + ", Column 2: " + column2);
        }
    } else {
        // Handle query job failure
        log.error("Query job failed: " + queryJob.getStatus().getError());
    }
} catch (Exception ex) {
    log.error("Error: " + ex.getMessage());
}
